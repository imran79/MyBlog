@using System.Reflection
@using Microsoft.AspNetCore.Components.WebAssembly.Services
@inject LazyAssemblyLoader AssemblyLoader
<Router AppAssembly="@typeof(Program).Assembly" 
    AdditionalAssemblies="@LoadedAssemblies" OnNavigateAsync="@OnNavigateAsync">
    <Found Context="routeData">
        <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" >
            <NotAuthorized>
					@if (!context.User.Identity.IsAuthenticated)
					{
						@* <RedirectToLogin /> *@
					}
					else
					{
						<p>
							You are not authorized to access
							this resource.
						</p>
					}
				</NotAuthorized>
                </AuthorizeRouteView>
    </Found>
    <NotFound>
        <CascadingAuthenticationState>
            <LayoutView Layout="@typeof(MainLayout)">
                <p>Sorry, there's nothing at this address.</p>
            </LayoutView>
        </CascadingAuthenticationState>
    </NotFound>
</Router>

@code{
    private List<Assembly> LoadedAssemblies = new List<Assembly>();

    private async Task OnNavigateAsync(NavigationContext context)
    {
        // Url of the page that needs the lazy loaded assembly
        if (context.Path.IndexOf("users") != -1)
        {
            var assemblies = await AssemblyLoader.LoadAssembliesAsync(new List<string> { "User.dll" });
            LoadedAssemblies.AddRange(assemblies);
        }
        else if (context.Path.IndexOf("blogs") != -1)
        {
            var assemblies = await AssemblyLoader.LoadAssembliesAsync(new List<string> { "Blog.dll" });
            LoadedAssemblies.AddRange(assemblies);
        }
    }
}
